import numpy as np
#Number 1
x = [3.6, 3.8, 3.9]
y = [1.675, 1.436, 1.318]
value = 3.7
def nevilles_method(x, y, value):
 num = len(x)
 nev_matrix = np.zeros([num,num], dtype = float) 
 
 for i in range(num):
  nev_matrix[i][0] = y[i]  
 
 for i in range(1, num):  
  for j in range(1, num):
    first = (value - x[i-j]) * nev_matrix[i][j-1]
    second = (value - x[i]) * nev_matrix[i-1][j-1]
    denominator = x[i] - x[i-1]
    coefficient = (first - second) / denominator
    nev_matrix[i][j] = coefficient
 return nev_matrix[1][1]
print(nevilles_method(x, y, value))
print("\n")

#Number 2
x = [ 7.2, 7.4, 7.5, 7.6]
y = [23.5492, 25.3913, 26.8224, 27.4589]

def divided_difference_table(x, y):
  n = len(x)
  new_matrix = np.zeros([n,n], dtype = float)
  for i in range(n):
    new_matrix[i][0] = y[i]
    
  for i in range(1, n):
    for j in range(1, n):
      new_matrix[i][j] = (new_matrix[i][j-1] - new_matrix[i-1][j-1]) / (x[i] - x[i-j])
          
  print("[", end = "")
  print(new_matrix[1][1], end =", ")
  print(new_matrix[2][2], end = ", ")
  print(new_matrix[3][3], end = "]\n\n")
divided_difference_table(x,y)

#Number 3
fin_value = 7.3
n = len(x)
matrix = np.zeros([n,n], dtype = float)
def get_approximate_result(matrix, x, y, fin_value):
    p_1 = y[0] + (matrix[1][1] * (fin_value - x[0])) 
    p_2 = p_1 + (matrix[2][2] * ((fin_value - x[0]) * (fin_value - x[1])))
    p_3 = p_2 + (matrix[3][3] * ((fin_value - x[0]) * (fin_value - x[1]) * (fin_value - x[2])))
    print(p_3)
get_approximate_result(matrix, x, y, fin_value)

#Number 4
xx = [3.6, 3.8, 3.9]
dx = [1.675, 1.436, 1.318]
ddx = [-1.195, -1.188, -1.182]
def hermite_dd(tx, ty, dx, dy):
  top = (tx - ty)
  bottom = (dx-dy)
  result = top / bottom
  return result
  
def hermite_interpolation(x, y, dx):
    num_of_points = len(xx)
    n = num_of_points * 2
    herm_matrix = np.zeros([n, n], dtype = float)
   
    index = 0
    for x in range(n, 0, -2):
      herm_matrix[index][0] = xx[x % 3]
      herm_matrix[index+1][0] = xx[x % 3]
      index = index + 2
    
    index = 0
    for x in range(n, 0, -2):
      herm_matrix[index][1] = dx[x % 3]
      herm_matrix[index + 1][1] = dx[x % 3]
      index = index + 2
    
    index = 0
    while index < num_of_points:
      herm_matrix[index * 2 + 1][2] = ddx[index]
      index += 1
    
    for x in range(2, n-1 , 2):
      herm_matrix[x][2] = hermite_dd(herm_matrix[x][1], herm_matrix[x-1][1], herm_matrix[x][0], herm_matrix[x-1][0])
    
    for x in range(2, n):
      if x % 2 == 0:
        herm_matrix[x][3] = hermite_dd(herm_matrix[x][2], herm_matrix[x-1][2], herm_matrix[x][0], herm_matrix[x-1][0])
      if x % 2 == 1:
        herm_matrix[x][3] = hermite_dd(herm_matrix[x-1][2], herm_matrix[x][2], herm_matrix[x-2][0], herm_matrix[x][0])
    
    for x in range(3, n):
      if x % 2 == 0:
        herm_matrix[x][4] = hermite_dd(herm_matrix[x][2], herm_matrix[x-2][2], herm_matrix[x+1][0], herm_matrix[x-1][0])
      if x % 2 == 1:
        herm_matrix[x][4] = hermite_dd(herm_matrix[x-1][3], herm_matrix[x][3], herm_matrix[x-2][0], herm_matrix[x][0])
    
    for x in range(4,n):
      herm_matrix[x][5] = hermite_dd(herm_matrix[x][4], herm_matrix[x-1][4], herm_matrix[x][0], herm_matrix[x-4][0])
    print(herm_matrix, end = "\n\n")    
hermite_interpolation(xx, dx, ddx)

#Number 5
